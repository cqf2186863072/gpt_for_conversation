[{"role": "system", "content": "\u4f60\u662fpython\u9ad8\u624b"}, {"role": "user", "content": "\u4f60\u597d"}, {"role": "assistant", "content": "\u4f60\u597d\uff01\u6709\u4ec0\u4e48Python\u95ee\u9898\u6211\u53ef\u4ee5\u5e2e\u60a8\u89e3\u7b54\u5417\uff1f"}, {"role": "user", "content": "\u4f60\u4f1aC#\u8bed\u8a00\u5417"}, {"role": "assistant", "content": "\u4f5c\u4e3a\u4e00\u4e2aAI\u52a9\u624b\uff0c\u6211\u5bf9C#\u8bed\u8a00\u4e5f\u6709\u4e00\u5b9a\u4e86\u89e3\u3002\u8bf7\u95ee\u60a8\u6709\u4ec0\u4e48\u5173\u4e8eC#\u7684\u95ee\u9898\uff0c\u6211\u53ef\u4ee5\u5c3d\u91cf\u5e2e\u60a8\u89e3\u7b54\u3002"}, {"role": "user", "content": "\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\n```\nimport re\nimport os\nimport configparser\nimport json\nimport threading\nimport time\nfrom datetime import datetime\nfrom enum import Enum\nfrom gpt_module import GPTClient\n\nclass InputMode(Enum):\n    KEYBOARD = 0\n    VOICE = 1\n\nclass OutputMode(Enum):\n    PRINT = 0\n    SPEAK = 1\n\nclass CheckResult(Enum):\n    BREAK = 0\n    CONTINUE = 1\n\nclass Message:\n    def __init__(self, role, content):\n        self.role = role\n        self.content = content\n\n    def to_dict(self):\n        return {\"role\": f\"{self.role}\", \"content\": self.content}\n\nclass DialogueManager:\n    def __init__(self, gpt_client, synthesizer=None, recognizer=None):\n        self.gpt_client = gpt_client\n        self.synthesizer = synthesizer\n        self.recognizer = recognizer\n        self.set_prompt()\n        self.init_keywords()\n\n    def init_keywords(self):\n        self.InputMode = InputMode.KEYBOARD\n        self.OutputMode = OutputMode.PRINT\n\n        self.set_prompt_words = [\"\u8bbe\u7f6e\", \"set\"]\n        self.set_prompt_pattern = self.build_pattern(self.set_prompt_words)\n\n        self.save_dialogue_words = [\"\u4fdd\u5b58\", \"save\"]\n        self.save_dialogue_pattern = self.build_pattern(self.save_dialogue_words)\n\n        self.switch_OutputMode_words = [\"\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\", \"\u8bed\u97f3\"]\n        self.switch_OutputMode_pattern = self.build_pattern(self.switch_OutputMode_words)\n\n        self.switch_InputMode_words = [\"\u5207\u6362\u8f93\u5165\u6a21\u5f0f\", \"\u5207\u6362\", \"switch\", \"change\", \"toggle\"]\n        self.switch_InputMode_pattern = self.build_pattern(self.switch_InputMode_words)\n\n        self.multiline_words = [\"\u591a\u884c\", \"multiline\"]\n        self.multiline_pattern = self.build_pattern(self.multiline_words)\n\n        self.exit_words = [\"\u9000\u51fa\", \"\u7ed3\u675f\", \"\u505c\u6b62\", \"exit\", \"end\", \"quit\"]\n        self.exit_pattern = self.build_pattern(self.exit_words)\n\n    def build_pattern(self, words):\n        return \"|\".join([f\"^({word})[\u3002.]?\\s*$\" for word in words])\n\n    def check_key_words(self):\n        self.CheckResult = None\n\n        if re.match(self.set_prompt_pattern, self.user_input):\n            file_name = input(\"\u8bf7\u8f93\u5165\u5bf9\u8bdd\u8bb0\u5f55\u6587\u4ef6\u540d\uff1a\")\n            self.set_prompt(file_name)\n            self.CheckResult = CheckResult.CONTINUE\n        if re.match(self.save_dialogue_pattern, self.user_input):\n            self.save_dialogue()\n            self.CheckResult = CheckResult.CONTINUE\n        if re.match(self.switch_OutputMode_pattern, self.user_input):\n            self.switch_OutputMode()\n            self.CheckResult = CheckResult.CONTINUE\n        if re.match(self.switch_InputMode_pattern, self.user_input):\n            self.switch_InputMode()\n            self.CheckResult = CheckResult.CONTINUE\n\n\n        if re.match(self.multiline_pattern, self.user_input):\n            self.user_input = self.get_multiline_input()\n\n        if re.match(self.exit_pattern, self.user_input):\n            self.exit_flag = True\n            self.CheckResult = CheckResult.BREAK\n\n    def set_prompt(self, file_name=None):\n        '''Method to set prompt and send dialogue history\n\n        '''\n        if file_name:\n            try:\n                file_name = os.path.join('saved_dialogue_history', file_name + '.json')\n                if os.path.exists(file_name):\n                    # with open(file_name, 'r', encoding='utf-8') as file:\n                    with open(file_name, 'r') as file:\n                        self.dialogue_history = json.load(file)\n                    print(\"prompt\u521d\u59cb\u5316\u6210\u529f\")\n                else:\n                    raise Exception(f'\u672a\u627e\u5230\u6587\u4ef6{file_name}')\n            except Exception as e:\n                print(e)\n        else:\n            self.dialogue_history = [{\"role\": \"system\", \"content\": ''}]\n\n    def save_dialogue(self):\n        file_name = input(\"\u8bf7\u8f93\u5165\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\uff1a\")\n        if not file_name:\n            file_name = datetime.now().strftime(\"%Y%m%d_%H%M%S\")  # \u9ed8\u8ba4\u547d\u540d\u4e3a\u65e5\u671f+\u65f6\u95f4\n\n        # \u521b\u5efa'saved_dialogue_history'\u6587\u4ef6\u5939\n        if not os.path.exists('saved_dialogue_history'):\n            os.makedirs('saved_dialogue_history')\n\n        # \u5c06\u5bf9\u8bdd\u8bb0\u5f55\u4fdd\u5b58\u4e3ajson\u6587\u4ef6\n        with open(os.path.join('saved_dialogue_history', file_name + '.json'), 'w') as file:\n            json.dump(self.dialogue_history, file)\n\n        # \u5c06\u5bf9\u8bdd\u8bb0\u5f55\u4fdd\u5b58\u4e3atxt\u6587\u4ef6\n        with open(os.path.join('saved_dialogue_history', file_name + '.txt'), 'w', encoding='utf-8') as file:\n            for message in self.dialogue_history:\n                file.write(f\"{message['role']}: {message['content']}\\n\")\n\n        print(\"\u5bf9\u8bdd\u8bb0\u5f55\u5df2\u4fdd\u5b58\")\n\n    def switch_OutputMode(self):\n        if self.OutputMode == OutputMode.PRINT:\n            if self.synthesizer:\n                self.OutputMode = OutputMode.SPEAK\n                self.output(\"\u5df2\u5207\u6362\u5230\u8bed\u97f3\u8f93\u51fa\u6a21\u5f0f\")\n            else:\n                print(\"\u62b1\u6b49\uff0c\u8bed\u97f3\u8f93\u51fa\u6a21\u5f0f\u4e0d\u53ef\u7528\")\n        else:\n            self.OutputMode = OutputMode.PRINT\n            print(\"\u5df2\u5207\u6362\u5230\u6587\u672c\u8f93\u51fa\u6a21\u5f0f\uff0c\u8bf7\u8f93\u5165\")\n\n    def switch_InputMode(self):\n        if self.InputMode == InputMode.KEYBOARD:\n            if self.recognizer:\n                self.InputMode = InputMode.VOICE\n                self.output(\"\u5df2\u5207\u6362\u5230\u8bed\u97f3\u8f93\u5165\u6a21\u5f0f\uff0c\u8bf7\u8bf4\u8bdd\")\n            else:\n                print(\"\u62b1\u6b49\uff0c\u8bed\u97f3\u8f93\u5165\u6a21\u5f0f\u4e0d\u53ef\u7528\uff0c\u8bf7\u4f7f\u7528\u952e\u76d8\u8f93\u5165\")\n        else:\n            self.InputMode = InputMode.KEYBOARD\n            print(\"\u5df2\u5207\u6362\u5230\u952e\u76d8\u8f93\u5165\u6a21\u5f0f\uff0c\u8bf7\u8f93\u5165\")\n\n    def get_multiline_input(self):\n        print(\"\u8bf7\u8f93\u5165\u591a\u884c\u5185\u5bb9\uff0c\u4ee5END\u7ed3\u675f\")\n        lines = []\n        while True:\n            line = input()\n            if line == \"END\":\n                break\n            lines.append(line)\n        return \"\\n\".join(lines)\n\n    def show_loading(self):\n        start_time = time.time()\n        while self.loading_flag:\n            print('\u52a0\u8f7d\u4e2d...', end='\\r')\n            time.sleep(2)\n            if time.time() - start_time > 60:\n                print('\u957f\u65f6\u95f4\u672a\u54cd\u5e94\uff0c\u5efa\u8bae\u7ed3\u675f\u7a0b\u5e8f')\n                break\n\n    def output(self, text):\n        if self.synthesizer and self.OutputMode == OutputMode.SPEAK:\n            self.synthesizer.text_to_speech_speaker_async(text)\n        print(f\"assistant: {text}\")\n\n    def send_and_receive(self):\n        text = self.gpt_client.send_request(self.dialogue_history)\n        self.loading_flag = False\n        self.output(text)\n        assistant_message = Message(\"assistant\", text)\n        self.dialogue_history.append(assistant_message.to_dict())\n\n    def run(self):\n        self.exit_flag = False\n        self.loading_flag = False\n        while not self.exit_flag:\n            try:\n                # \u83b7\u53d6\u7528\u6237\u8f93\u5165\n                if self.InputMode == InputMode.VOICE:\n                    print(\"User: \")\n                    self.user_input = self.recognizer.speech_to_text_microphone()\n                    print(self.user_input)\n                else:\n                    self.user_input = input(\"User: \")\n\n                # \u68c0\u67e5\u5173\u952e\u8bcd\n                self.check_key_words()\n                if self.CheckResult == CheckResult.BREAK:\n                    break\n                elif self.CheckResult == CheckResult.CONTINUE:\n                    continue\n\n                # \u5c06\u7528\u6237\u8f93\u5165\u52a0\u5165\u5bf9\u8bdd\u5386\u53f2\n                user_message = Message(\"user\", self.user_input)\n                self.dialogue_history.append(user_message.to_dict())\n                \n                # \u542f\u52a8\u5e76\u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\n                self.loading_flag = True\n                t1 = threading.Thread(target=self.send_and_receive)\n                t1.start()\n                t2 = threading.Thread(target=self.show_loading)\n                t2.start()\n                t1.join()\n                t2.join()\n\n            except Exception as e:\n                print(f\"Error: {e}\")\n                break\n        print('\u611f\u8c22\u60a8\u4f7f\u7528\u672c\u7a0b\u5e8f\uff0c\u518d\u89c1\uff01')\n\nif __name__ == '__main__':\n    # \u7528\u914d\u7f6e\u6587\u4ef6\u914d\u7f6egpt\n    config = configparser.ConfigParser()\n    file_dir = os.path.dirname(__file__)\n    config_file = os.path.join(file_dir, 'config.ini')\n    try:\n        if os.path.exists(config_file): \n            config.read(config_file)\n            url = config.get('gpt', 'url')\n            header = eval(config.get('gpt', 'header'))\n        else:\n            raise Exception(\"\u8bf7\u914d\u7f6econfig.ini\")\n    except Exception as e:\n        print(e)\n    gpt_client = GPTClient(url, header)\n\n    # \u624b\u52a8\u914d\u7f6egpt\n    # url = \"https://gpt-4-32k-api.com/\" # replace with your own url\n    # header = {\"Authorization\": \"Bearer xxx\"} # replace with your own header\n    # gpt_client = GPTClient(url, header)\n\n    # \u8fd0\u884c\u5bf9\u8bdd\u7cfb\u7edf\n    dialogue_manager = DialogueManager(gpt_client)\n    dialogue_manager.set_prompt('\u7f16\u7a0b\u9ad8\u624b')\n    dialogue_manager.run()\n```\n\u6211\u60f3\u77e5\u9053\u6211\u662f\u5426\u53ef\u4ee5\u628a\u5176\u4e2d\u901a\u8fc7\u5173\u952e\u8bcd\u89e6\u53d1\u7684\u51e0\u4e2a\u65b9\u6cd5\u653e\u5230\u67d0\u4e2a\u7c7b\u91cc\uff0c\u4f7f\u4ee3\u7801\u66f4\u6e05\u6670\u660e\u4e86"}, {"role": "assistant", "content": "\u662f\u7684\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u901a\u8fc7\u5173\u952e\u8bcd\u89e6\u53d1\u7684\u65b9\u6cd5\u653e\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\u4e2d\uff0c\u8fd9\u5c06\u4f7f\u4ee3\u7801\u66f4\u52a0\u6a21\u5757\u5316\u548c\u6e05\u6670\u3002\u6211\u5efa\u8bae\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a`KeywordManager`\u7684\u65b0\u7c7b\uff0c\u5c06\u4e0e\u5173\u952e\u8bcd\u76f8\u5173\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\u79fb\u81f3\u8be5\u7c7b\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a\n\n```python\nclass KeywordManager:\n    def __init__(self):\n        self.init_keywords()\n\n    def init_keywords(self):\n        self.set_prompt_words = [\"\u8bbe\u7f6e\", \"set\"]\n        self.set_prompt_pattern = self.build_pattern(self.set_prompt_words)\n\n        self.save_dialogue_words = [\"\u4fdd\u5b58\", \"save\"]\n        self.save_dialogue_pattern = self.build_pattern(self.save_dialogue_words)\n\n        self.switch_OutputMode_words = [\"\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\", \"\u8bed\u97f3\"]\n        self.switch_OutputMode_pattern = self.build_pattern(self.switch_OutputMode_words)\n\n        self.switch_InputMode_words = [\"\u5207\u6362\u8f93\u5165\u6a21\u5f0f\", \"\u5207\u6362\", \"switch\", \"change\", \"toggle\"]\n        self.switch_InputMode_pattern = self.build_pattern(self.switch_InputMode_words)\n\n        self.multiline_words = [\"\u591a\u884c\", \"multiline\"]\n        self.multiline_pattern = self.build_pattern(self.multiline_words)\n\n        self.exit_words = [\"\u9000\u51fa\", \"\u7ed3\u675f\", \"\u505c\u6b62\", \"exit\", \"end\", \"quit\"]\n        self.exit_pattern = self.build_pattern(self.exit_words)\n\n    def build_pattern(self, words):\n        return \"|\".join([f\"^({word})[\u3002.]?\\s*$\" for word in words])\n```\n\n\u7136\u540e\uff0c\u5728`DialogueManager`\u7c7b\u4e2d\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a`KeywordManager`\u5b9e\u4f8b\uff0c\u5e76\u5728`check_key_words`\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5b83\u3002\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a\n\n```python\nclass DialogueManager:\n    def __init__(self, gpt_client, synthesizer=None, recognizer=None):\n        self.gpt_client = gpt_client\n        self.synthesizer = synthesizer\n        self.recognizer = recognizer\n        self.keyword_manager = KeywordManager()  # \u521b\u5efa KeywordManager \u5b9e\u4f8b\n        # ... \u5176\u4ed6\u521d\u59cb\u5316\u4ee3\u7801 ...\n\n    def check_key_words(self):\n        self.CheckResult = None\n\n        if re.match(self.keyword_manager.set_prompt_pattern, self.user_input):\n            # ... \u5904\u7406\u8bbe\u7f6e\u63d0\u793a ...\n        # ... \u5176\u4ed6\u5173\u952e\u8bcd\u68c0\u67e5 ...\n```\n\n\u8fd9\u6837\uff0c\u60a8\u5c31\u5c06\u5173\u952e\u8bcd\u76f8\u5173\u7684\u903b\u8f91\u4e0e`DialogueManager`\u7c7b\u5206\u79bb\uff0c\u4f7f\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\u548c\u6a21\u5757\u5316\u3002"}, {"role": "user", "content": "\u7c7b\u4e2d\u53ef\u4ee5\u5d4c\u5957\u7c7b\u5417"}, {"role": "assistant", "content": "\u662f\u7684\uff0cPython\u5141\u8bb8\u5728\u7c7b\u4e2d\u5d4c\u5957\u7c7b\u3002\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u7c7b\u7684\u5185\u90e8\u7c7b\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\n```python\nclass OuterClass:\n    class InnerClass:\n        def inner_method(self):\n            print(\"This is an inner class method.\")\n\n    def outer_method(self):\n        print(\"This is an outer class method.\")\n        inner_instance = self.InnerClass()\n        inner_instance.inner_method()\n\n# \u4f7f\u7528\u5185\u90e8\u7c7b\u548c\u5916\u90e8\u7c7b\nouter_instance = OuterClass()\nouter_instance.outer_method()\n\ninner_instance = OuterClass.InnerClass()\ninner_instance.inner_method()\n```\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a`OuterClass`\u7684\u5916\u90e8\u7c7b\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u540d\u4e3a`InnerClass`\u7684\u5185\u90e8\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u5916\u90e8\u7c7b\u7684\u65b9\u6cd5\u4e2d\u521b\u5efa\u5185\u90e8\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u5728\u5916\u90e8\u7c7b\u4e4b\u5916\u521b\u5efa\u5185\u90e8\u7c7b\u7684\u5b9e\u4f8b\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5185\u90e8\u7c7b\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u5916\u90e8\u7c7b\u7684\u67d0\u4e9b\u7279\u5b9a\u529f\u80fd\uff0c\u800c\u8fd9\u4e9b\u529f\u80fd\u4e0e\u5916\u90e8\u7c7b\u7684\u5176\u4ed6\u90e8\u5206\u5173\u7cfb\u4e0d\u5927\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5185\u90e8\u7c7b\u53ef\u4ee5\u4f7f\u4ee3\u7801\u66f4\u52a0\u6574\u6d01\u548c\u6a21\u5757\u5316\u3002\u7136\u800c\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5c06\u7c7b\u4fdd\u6301\u5728\u540c\u4e00\u5c42\u6b21\u7ed3\u6784\u4e2d\u53ef\u80fd\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u7ef4\u62a4\u3002\u5728\u60a8\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u5c06`KeywordManager`\u4f5c\u4e3a`DialogueManager`\u7684\u5185\u90e8\u7c7b\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5c06\u5b83\u4eec\u4fdd\u6301\u5728\u540c\u4e00\u5c42\u6b21\u7ed3\u6784\u4e2d\u53ef\u80fd\u66f4\u5bb9\u6613\u7406\u89e3\u3002"}, {"role": "user", "content": "\u90a3\u8bf7\u4f60\u628ainit_keywords/check_keywords/set_prompt/save_dialogue/\u4e24\u4e2aswitch/get_multiline_input\u8fd9\u4e9b\u65b9\u6cd5\u653e\u5230\u4e00\u4e2a\u53ebSettingsManager\u7684\u5185\u90e8\u7c7b\uff08\u5728DialogueManager\u5185\uff09\u4e2d"}, {"role": "assistant", "content": "\u4ee5\u4e0b\u662f\u6839\u636e\u60a8\u7684\u8981\u6c42\u4fee\u6539\u540e\u7684`DialogueManager`\u7c7b\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u540d\u4e3a`SettingsManager`\u7684\u5185\u90e8\u7c7b\u3002\u8fd9\u4e2a\u5185\u90e8\u7c7b\u5305\u62ec\u4e86`init_keywords`\u3001`check_keywords`\u3001`set_prompt`\u3001`save_dialogue`\u3001\u4e24\u4e2a`switch`\u65b9\u6cd5\u4ee5\u53ca`get_multiline_input`\u65b9\u6cd5\u3002\n\n```python\nclass DialogueManager:\n    class SettingsManager:\n        def __init__(self, outer_instance):\n            self.outer_instance = outer_instance\n            self.init_keywords()\n\n        def init_keywords(self):\n            # ... \u521d\u59cb\u5316\u5173\u952e\u8bcd\u4ee3\u7801 ...\n\n        def check_keywords(self, user_input):\n            # ... \u68c0\u67e5\u5173\u952e\u8bcd\u4ee3\u7801 ...\n\n        def set_prompt(self, file_name=None):\n            # ... \u8bbe\u7f6e\u63d0\u793a\u4ee3\u7801 ...\n\n        def save_dialogue(self):\n            # ... \u4fdd\u5b58\u5bf9\u8bdd\u4ee3\u7801 ...\n\n        def switch_OutputMode(self):\n            # ... \u5207\u6362\u8f93\u51fa\u6a21\u5f0f\u4ee3\u7801 ...\n\n        def switch_InputMode(self):\n            # ... \u5207\u6362\u8f93\u5165\u6a21\u5f0f\u4ee3\u7801 ...\n\n        def get_multiline_input(self):\n            # ... \u83b7\u53d6\u591a\u884c\u8f93\u5165\u4ee3\u7801 ...\n\n        def build_pattern(self, words):\n            # ... \u6784\u5efa\u6a21\u5f0f\u4ee3\u7801 ...\n\n    def __init__(self, gpt_client, synthesizer=None, recognizer=None):\n        self.gpt_client = gpt_client\n        self.synthesizer = synthesizer\n        self.recognizer = recognizer\n        self.settings_manager = self.SettingsManager(self)  # \u521b\u5efa SettingsManager \u5b9e\u4f8b\n        # ... \u5176\u4ed6\u521d\u59cb\u5316\u4ee3\u7801 ...\n\n    def run(self):\n        # ... \u5bf9\u8bdd\u7ba1\u7406\u5668\u8fd0\u884c\u4ee3\u7801 ...\n        # \u4f7f\u7528 self.settings_manager.check_keywords(self.user_input) \u66ff\u6362\u539f\u6765\u7684 self.check_key_words() \u8c03\u7528\n```\n\n\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u8ba9`SettingsManager`\u7c7b\u80fd\u591f\u8bbf\u95ee`DialogueManager`\u7c7b\u7684\u5b9e\u4f8b\uff0c\u6211\u4eec\u5c06`DialogueManager`\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9`SettingsManager`\u7684\u6784\u9020\u51fd\u6570\u3002\u5f53\u60a8\u9700\u8981\u5728`SettingsManager`\u7684\u65b9\u6cd5\u4e2d\u8bbf\u95ee`DialogueManager`\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528`self.outer_instance`\u3002\n\n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528`self.settings_manager.check_keywords(self.user_input)`\u66ff\u6362\u539f\u6765\u7684`self.check_key_words()`\u8c03\u7528\u3002\u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528`self.settings_manager`\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u4f8b\u5982`set_prompt`\u3001`save_dialogue`\u7b49\u3002"}]