[{"role": "system", "content": ""}, {"role": "user", "content": "from gpt_module import GPTClient\nfrom dialogue_module import Message\nfrom dialogue_module import DialogueManager\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QPushButton, QVBoxLayout, QWidget, QFileDialog, QHBoxLayout, QInputDialog, QPlainTextEdit, QSplitter\nfrom PyQt5.QtCore import Qt, QThreadPool, QRunnable, pyqtSlot\nimport traceback\nimport sys\nimport re\nimport os\n\nclass GPTWorker(QRunnable):\n    def __init__(self, dialogue_manager, user_message):\n        super(GPTWorker, self).__init__()\n        self.dialogue_manager = dialogue_manager\n        self.user_message = user_message\n\n    @pyqtSlot()\n    def run(self):\n        try:\n            # \u5c06\u7528\u6237\u8f93\u5165\u52a0\u5165\u5bf9\u8bdd\u5386\u53f2\n            user_message_obj = Message(\"user\", self.user_message)\n            self.dialogue_manager.dialogue_history.append(user_message_obj.to_dict())\n\n            # \u83b7\u53d6AI\u52a9\u624b\u7684\u56de\u590d\n            assistant_message = self.dialogue_manager.gpt_client.send_request(self.dialogue_manager.dialogue_history)\n            assistant_message_obj = Message(\"assistant\", assistant_message)\n            self.dialogue_manager.dialogue_history.append(assistant_message_obj.to_dict())\n\n            self.dialogue_manager.parent.receive_message(assistant_message)\n\n        except Exception as e:\n            print(\"Error in GPTWorker:\", e)\n            traceback.print_exc()\n\nclass App(QMainWindow):\n    def __init__(self, dialogue_manager):\n        # QMetaType.registerMetaType(QTextCursor, \"QTextCursor\")\n\n        super().__init__()\n        self.dialogue_manager = dialogue_manager\n        self.dialogue_manager.parent = self\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle(\"AI\u52a9\u624b\")\n\n        # \u521b\u5efa\u4e00\u4e2a\u5782\u76f4\u5e03\u5c40\n        layout = QVBoxLayout()\n\n        # \u521b\u5efa\u4e00\u4e2a\u5206\u9694\u6761\n        splitter = QSplitter(Qt.Vertical)\n        \n\n        # \u521b\u5efa\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\u6765\u663e\u793a\u5bf9\u8bdd\u5386\u53f2\n        self.conversation_history = QTextEdit()\n        self.conversation_history.setReadOnly(True)\n        splitter.addWidget(self.conversation_history)\n\n        # \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u6846\u4f9b\u7528\u6237\u8f93\u5165\u6587\u672c\n        self.user_input = QPlainTextEdit()\n        splitter.addWidget(self.user_input)\n\n        layout.addWidget(splitter)\n\n        # \u521b\u5efa\u4e00\u4e2a\u53d1\u9001\u6309\u94ae\u6765\u89e6\u53d1\u6d88\u606f\u53d1\u9001\n        self.send_button = QPushButton(\"\u53d1\u9001\")\n        self.send_button.clicked.connect(self.send_message)\n        layout.addWidget(self.send_button)\n\n        # \u521b\u5efa\u529f\u80fd\u6309\u94ae\n        self.init_feature_buttons(layout)\n\n        # \u8bbe\u7f6e\u7a97\u53e3\u7684\u5e03\u5c40\n        container = QWidget()\n        container.setLayout(layout)\n        self.setCentralWidget(container)\n\n    def init_feature_buttons(self, layout):\n        # \u521b\u5efa\u4e00\u4e2a\u6c34\u5e73\u5e03\u5c40\n        hbox = QHBoxLayout()\n\n        # \u521b\u5efa\u8bbe\u7f6ePrompt\u6309\u94ae\n        self.set_prompt_button = QPushButton(\"\u8bbe\u7f6ePrompt\")\n        self.set_prompt_button.clicked.connect(self.set_prompt)\n        hbox.addWidget(self.set_prompt_button)\n\n        # \u521b\u5efa\u4fdd\u5b58\u5bf9\u8bdd\u6309\u94ae\n        self.save_dialogue_button = QPushButton(\"\u4fdd\u5b58\u5bf9\u8bdd\")\n        self.save_dialogue_button.clicked.connect(self.save_dialogue)\n        hbox.addWidget(self.save_dialogue_button)\n\n        # # \u521b\u5efa\u5207\u6362\u8f93\u5165\u6a21\u5f0f\u6309\u94ae\n        # switch_input_mode_button = QPushButton(\"\u5207\u6362\u8f93\u5165\u6a21\u5f0f\")\n        # switch_input_mode_button.clicked.connect(self.switch_input_mode)\n        # hbox.addWidget(switch_input_mode_button)\n\n        # # \u521b\u5efa\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\u6309\u94ae\n        # switch_output_mode_button = QPushButton(\"\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\")\n        # switch_output_mode_button.clicked.connect(self.switch_output_mode)\n        # hbox.addWidget(switch_output_mode_button)\n\n        layout.addLayout(hbox)\n\n    def send_message(self):\n        user_message = self.user_input.toPlainText()\n        if not user_message:\n            return\n\n        self.conversation_history.append(f\"User: {user_message}\\n\")\n        self.user_input.clear()\n\n        # \u7981\u7528\u53d1\u9001\u548c\u8bbe\u7f6ePrompt\u6309\u94ae\n        self.send_button.setEnabled(False)\n        self.set_prompt_button.setEnabled(False)\n\n        # \u521b\u5efaGPTWorker\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ebf\u7a0b\u6c60\n        gpt_worker = GPTWorker(self.dialogue_manager, user_message)\n        QThreadPool.globalInstance().start(gpt_worker)\n\n    @pyqtSlot(str)\n    def receive_message(self, assistant_message):\n        # GPT\u8bf7\u6c42\u5b8c\u6210\u540e\u66f4\u65b0UI\n        self.conversation_history.append(f\"Assistant: {assistant_message}\\n\")\n        self.send_button.setEnabled(True)\n        self.set_prompt_button.setEnabled(True)\n\n    def set_prompt(self):\n        choice, ok = QInputDialog.getItem(self, \"\u8bbe\u7f6ePrompt\", \"\u8bf7\u9009\u62e9\u8bbe\u7f6ePrompt\u7684\u65b9\u5f0f\uff1a\", [ \"\u4ece\u6587\u4ef6\u52a0\u8f7d\", \"\u6587\u672c\u8f93\u5165\"], editable=False)\n        if ok:\n            if choice == \"\u6587\u672c\u8f93\u5165\":\n                prompt_text, ok = QInputDialog.getText(self, \"\u8bbe\u7f6ePrompt\", \"\u8bf7\u8f93\u5165prompt(system's content)\uff1a\")\n                if ok:\n                    self.dialogue_manager.set_prompt(prompt_text=prompt_text)\n            elif choice == \"\u4ece\u6587\u4ef6\u52a0\u8f7d\":\n                saved_history_path = os.path.join(os.getcwd(), 'saved_dialogue_history')\n                prompt_file, _ = QFileDialog.getOpenFileName(self, \"\u9009\u62e9Prompt(*.json)\u6587\u4ef6\", saved_history_path, \"JSON\u6587\u4ef6 (*.json);;\u6240\u6709\u6587\u4ef6 (*)\")\n                prompt_file = re.findall(r\"(.*?).json\", prompt_file)\n                if prompt_file:\n                    self.dialogue_manager.set_prompt(prompt_file=prompt_file[0])\n\n    def save_dialogue(self):\n        file_name, ok = QInputDialog.getText(self, \"\u4fdd\u5b58\u5bf9\u8bdd\", \"\u8bf7\u8f93\u5165\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\uff1a\")\n        if ok and file_name:\n            self.dialogue_manager.save_dialogue(file_name)\n        elif ok:\n            self.dialogue_manager.save_dialogue()\n\n    def switch_input_mode(self):\n        self.dialogue_manager.switch_InputMode()\n\n    def switch_output_mode(self):\n        self.dialogue_manager.switch_OutputMode()\n\nif __name__ == \"__main__\":\n    gpt_client = GPTClient()\n    dialogue_manager = DialogueManager(gpt_client)\n\n    app = QApplication(sys.argv)\n    main_window = App(dialogue_manager)\n    main_window.show()\n    sys.exit(app.exec_())\n\u8bf7\u4f60\u8bb0\u4f4f\u6211\u73b0\u5728\u7684\u4ee3\u7801"}, {"role": "assistant", "content": "\u5f53\u7136\u53ef\u4ee5\uff0c\u4ee5\u4e0b\u662f\u60a8\u63d0\u4f9b\u7684\u4ee3\u7801\uff1a\n\n```python\nfrom gpt_module import GPTClient\nfrom dialogue_module import Message\nfrom dialogue_module import DialogueManager\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QPushButton, QVBoxLayout, QWidget, QFileDialog, QHBoxLayout, QInputDialog, QPlainTextEdit, QSplitter\nfrom PyQt5.QtCore import Qt, QThreadPool, QRunnable, pyqtSlot\nimport traceback\nimport sys\nimport re\nimport os\n\nclass GPTWorker(QRunnable):\n    def __init__(self, dialogue_manager, user_message):\n        super(GPTWorker, self).__init__()\n        self.dialogue_manager = dialogue_manager\n        self.user_message = user_message\n\n    @pyqtSlot()\n    def run(self):\n        try:\n            # \u5c06\u7528\u6237\u8f93\u5165\u52a0\u5165\u5bf9\u8bdd\u5386\u53f2\n            user_message_obj = Message(\"user\", self.user_message)\n            self.dialogue_manager.dialogue_history.append(user_message_obj.to_dict())\n\n            # \u83b7\u53d6AI\u52a9\u624b\u7684\u56de\u590d\n            assistant_message = self.dialogue_manager.gpt_client.send_request(self.dialogue_manager.dialogue_history)\n            assistant_message_obj = Message(\"assistant\", assistant_message)\n            self.dialogue_manager.dialogue_history.append(assistant_message_obj.to_dict())\n\n            self.dialogue_manager.parent.receive_message(assistant_message)\n\n        except Exception as e:\n            print(\"Error in GPTWorker:\", e)\n            traceback.print_exc()\n\nclass App(QMainWindow):\n    def __init__(self, dialogue_manager):\n        # QMetaType.registerMetaType(QTextCursor, \"QTextCursor\")\n\n        super().__init__()\n        self.dialogue_manager = dialogue_manager\n        self.dialogue_manager.parent = self\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle(\"AI\u52a9\u624b\")\n\n        # \u521b\u5efa\u4e00\u4e2a\u5782\u76f4\u5e03\u5c40\n        layout = QVBoxLayout()\n\n        # \u521b\u5efa\u4e00\u4e2a\u5206\u9694\u6761\n        splitter = QSplitter(Qt.Vertical)\n        \n\n        # \u521b\u5efa\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\u6765\u663e\u793a\u5bf9\u8bdd\u5386\u53f2\n        self.conversation_history = QTextEdit()\n        self.conversation_history.setReadOnly(True)\n        splitter.addWidget(self.conversation_history)\n\n        # \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u6846\u4f9b\u7528\u6237\u8f93\u5165\u6587\u672c\n        self.user_input = QPlainTextEdit()\n        splitter.addWidget(self.user_input)\n\n        layout.addWidget(splitter)\n\n        # \u521b\u5efa\u4e00\u4e2a\u53d1\u9001\u6309\u94ae\u6765\u89e6\u53d1\u6d88\u606f\u53d1\u9001\n        self.send_button = QPushButton(\"\u53d1\u9001\")\n        self.send_button.clicked.connect(self.send_message)\n        layout.addWidget(self.send_button)\n\n        # \u521b\u5efa\u529f\u80fd\u6309\u94ae\n        self.init_feature_buttons(layout)\n\n        # \u8bbe\u7f6e\u7a97\u53e3\u7684\u5e03\u5c40\n        container = QWidget()\n        container.setLayout(layout)\n        self.setCentralWidget(container)\n\n    def init_feature_buttons(self, layout):\n        # \u521b\u5efa\u4e00\u4e2a\u6c34\u5e73\u5e03\u5c40\n        hbox = QHBoxLayout()\n\n        # \u521b\u5efa\u8bbe\u7f6ePrompt\u6309\u94ae\n        self.set_prompt_button = QPushButton(\"\u8bbe\u7f6ePrompt\")\n        self.set_prompt_button.clicked.connect(self.set_prompt)\n        hbox.addWidget(self.set_prompt_button)\n\n        # \u521b\u5efa\u4fdd\u5b58\u5bf9\u8bdd\u6309\u94ae\n        self.save_dialogue_button = QPushButton(\"\u4fdd\u5b58\u5bf9\u8bdd\")\n        self.save_dialogue_button.clicked.connect(self.save_dialogue)\n        hbox.addWidget(self.save_dialogue_button)\n\n        # # \u521b\u5efa\u5207\u6362\u8f93\u5165\u6a21\u5f0f\u6309\u94ae\n        # switch_input_mode_button = QPushButton(\"\u5207\u6362\u8f93\u5165\u6a21\u5f0f\")\n        # switch_input_mode_button.clicked.connect(self.switch_input_mode)\n        # hbox.addWidget(switch_input_mode_button)\n\n        # # \u521b\u5efa\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\u6309\u94ae\n        # switch_output_mode_button = QPushButton(\"\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\")\n        # switch_output_mode_button.clicked.connect(self.switch_output_mode)\n        # hbox.addWidget(switch_output_mode_button)\n\n        layout.addLayout(hbox)\n\n    def send_message(self):\n        user_message = self.user_input.toPlainText()\n        if not user_message:\n            return\n\n        self.conversation_history.append(f\"User: {user_message}\\n\")\n        self.user_input.clear()\n\n        # \u7981\u7528\u53d1\u9001\u548c\u8bbe\u7f6ePrompt\u6309\u94ae\n        self.send_button.setEnabled(False)\n        self.set_prompt_button.setEnabled(False)\n\n        # \u521b\u5efaGPTWorker\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ebf\u7a0b\u6c60\n        gpt_worker = GPTWorker(self.dialogue_manager, user_message)\n        QThreadPool.globalInstance().start(gpt_worker)\n\n    @pyqtSlot(str)\n    def receive_message(self, assistant_message):\n        # GPT\u8bf7\u6c42\u5b8c\u6210\u540e\u66f4\u65b0UI\n        self.conversation_history.append(f\"Assistant: {assistant_message}\\n\")\n        self.send_button.setEnabled(True)\n        self.set_prompt_button.setEnabled(True)\n\n    def set_prompt(self):\n        choice, ok = QInputDialog.getItem(self, \"\u8bbe\u7f6ePrompt\", \"\u8bf7\u9009\u62e9\u8bbe\u7f6ePrompt\u7684\u65b9\u5f0f\uff1a\", [ \"\u4ece\u6587\u4ef6\u52a0\u8f7d\", \"\u6587\u672c\u8f93\u5165\"], editable=False)\n        if ok:\n            if choice == \"\u6587\u672c\u8f93\u5165\":\n                prompt_text, ok = QInputDialog.getText(self, \"\u8bbe\u7f6ePrompt\", \"\u8bf7\u8f93\u5165prompt(system's content)\uff1a\")\n                if ok:\n                    self.dialogue_manager.set_prompt(prompt_text=prompt_text)\n           "}, {"role": "user", "content": "\u8bf7\u4f60\u5e2e\u6211\u4fee\u6539    \ndef set_prompt(self):\n        choice, ok = QInputDialog.getItem(self, \"\u8bbe\u7f6ePrompt\", \"\u8bf7\u9009\u62e9\u8bbe\u7f6ePrompt\u7684\u65b9\u5f0f\uff1a\", [ \"\u4ece\u6587\u4ef6\u52a0\u8f7d\", \"\u6587\u672c\u8f93\u5165\"], editable=False)\n        if ok:\n            if choice == \"\u6587\u672c\u8f93\u5165\":\n                prompt_text, ok = QInputDialog.getText(self, \"\u8bbe\u7f6ePrompt\", \"\u8bf7\u8f93\u5165prompt(system's content)\uff1a\")\n                if ok:\n                    self.dialogue_manager.set_prompt(prompt_text=prompt_text)\n            elif choice == \"\u4ece\u6587\u4ef6\u52a0\u8f7d\":\n                saved_history_path = os.path.join(os.getcwd(), 'saved_dialogue_history')\n                prompt_file, _ = QFileDialog.getOpenFileName(self, \"\u9009\u62e9Prompt(*.json)\u6587\u4ef6\", saved_history_path, \"JSON\u6587\u4ef6 (*.json);;\u6240\u6709\u6587\u4ef6 (*)\")\n                prompt_file = re.findall(r\"(.*?).json\", prompt_file)\n                if prompt_file:\n                    self.dialogue_manager.set_prompt(prompt_file=prompt_file[0])\n\u6211\u4e0d\u5e0c\u671b\u8fdb\u884c\u4e00\u6b21\u6587\u672c\u8f93\u5165\u6216\u4ece\u6587\u4ef6\u7684\u8bfb\u53d6\uff0c\u800c\u662f\u5728\u754c\u9762\u4e0a\u76f4\u63a5\u5c55\u793a\uff1a\u7b2c\u4e00\u884c\uff0c\u4ece\u6587\u672c\u8f93\u5165+\u8f93\u5165\u6846+\u786e\u8ba4\u6309\u94ae\uff1b\u7b2c\u4e8c\u884c\uff0c\u4ece\u6587\u4ef6\u8bfb\u53d6+\u6587\u4ef6\u9009\u62e9\uff08\u4ecesaved_dialogue_history\u6587\u4ef6\u5939\u4e2d\u8bfb\u53d6json\u6587\u4ef6\u7684\u524d\u7f00\u4f5c\u4e3a\u9009\u9879\uff09+\u786e\u8ba4\u6309\u94ae"}, {"role": "assistant", "content": "\u60a8\u53ef\u4ee5\u6839\u636e\u60a8\u7684\u9700\u6c42\u4fee\u6539`set_prompt`\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4fee\u6539\u540e\u7684\u793a\u4f8b\uff1a\n\n```python\ndef set_prompt(self):\n    # \u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\n    dialog = QDialog(self)\n    dialog.setWindowTitle(\"\u8bbe\u7f6ePrompt\")\n    dialog_layout = QVBoxLayout()\n\n    # \u4ece\u6587\u672c\u8f93\u5165\n    text_input_layout = QHBoxLayout()\n    text_input_label = QLabel(\"\u6587\u672c\u8f93\u5165\uff1a\")\n    text_input_edit = QLineEdit()\n    text_input_confirm_button = QPushButton(\"\u786e\u8ba4\")\n    text_input_layout.addWidget(text_input_label)\n    text_input_layout.addWidget(text_input_edit)\n    text_input_layout.addWidget(text_input_confirm_button)\n    dialog_layout.addLayout(text_input_layout)\n\n    # \u4ece\u6587\u4ef6\u52a0\u8f7d\n    file_input_layout = QHBoxLayout()\n    file_input_label = QLabel(\"\u4ece\u6587\u4ef6\u8bfb\u53d6\uff1a\")\n    file_input_combo = QComboBox()\n    saved_history_path = os.path.join(os.getcwd(), 'saved_dialogue_history')\n    prompt_files = [f[:-5] for f in os.listdir(saved_history_path) if f.endswith('.json')]\n    file_input_combo.addItems(prompt_files)\n    file_input_confirm_button = QPushButton(\"\u786e\u8ba4\")\n    file_input_layout.addWidget(file_input_label)\n    file_input_layout.addWidget(file_input_combo)\n    file_input_layout.addWidget(file_input_confirm_button)\n    dialog_layout.addLayout(file_input_layout)\n\n    # \u8bbe\u7f6e\u5bf9\u8bdd\u6846\u5e03\u5c40\n    dialog.setLayout(dialog_layout)\n\n    # \u8fde\u63a5\u4fe1\u53f7\u548c\u69fd\n    text_input_confirm_button.clicked.connect(lambda: self.dialogue_manager.set_prompt(prompt_text=text_input_edit.text()))\n    text_input_confirm_button.clicked.connect(dialog.accept)\n    file_input_confirm_button.clicked.connect(lambda: self.dialogue_manager.set_prompt(prompt_file=file_input_combo.currentText()))\n    file_input_confirm_button.clicked.connect(dialog.accept)\n\n    # \u663e\u793a\u5bf9\u8bdd\u6846\n    dialog.exec_()\n```\n\n\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\uff0c\u5305\u62ec\u4e24\u884c\u3002\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6807\u7b7e\uff08\"\u6587\u672c\u8f93\u5165\"\uff09\u3001\u4e00\u4e2a\u8f93\u5165\u6846\u548c\u4e00\u4e2a\u786e\u8ba4\u6309\u94ae\u3002\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u6807\u7b7e\uff08\"\u4ece\u6587\u4ef6\u8bfb\u53d6\"\uff09\u3001\u4e00\u4e2a\u4e0b\u62c9\u5217\u8868\uff08\u7528\u4e8e\u9009\u62e9\u6587\u4ef6\u540d\u524d\u7f00\uff09\u548c\u4e00\u4e2a\u786e\u8ba4\u6309\u94ae\u3002\u70b9\u51fb\u786e\u8ba4\u6309\u94ae\u540e\uff0c\u5c06\u4f7f\u7528\u7528\u6237\u9009\u62e9\u7684\u8bbe\u7f6ePrompt\u65b9\u6cd5\u3002"}]