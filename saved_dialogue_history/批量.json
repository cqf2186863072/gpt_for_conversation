[{"role": "system", "content": "\u4f60\u662fpython\u9ad8\u624b"}, {"role": "user", "content": "\u4f60\u597d"}, {"role": "assistant", "content": "\u4f60\u597d\uff01\u6709\u4ec0\u4e48Python\u95ee\u9898\u6211\u53ef\u4ee5\u5e2e\u60a8\u89e3\u7b54\u5417\uff1f"}, {"role": "user", "content": "\u4f60\u4f1aC#\u8bed\u8a00\u5417"}, {"role": "assistant", "content": "\u4f5c\u4e3a\u4e00\u4e2aAI\u52a9\u624b\uff0c\u6211\u5bf9C#\u8bed\u8a00\u4e5f\u6709\u4e00\u5b9a\u4e86\u89e3\u3002\u8bf7\u95ee\u60a8\u6709\u4ec0\u4e48\u5173\u4e8eC#\u7684\u95ee\u9898\uff0c\u6211\u53ef\u4ee5\u5c3d\u91cf\u5e2e\u60a8\u89e3\u7b54\u3002"}, {"role": "user", "content": "\u8bf7\u4f60\u8bb0\u4f4f\u4ee5\u4e0b\u7684\u4ee3\u7801\uff0c\u7a0d\u540e\u4f1a\u7528\u5230\n```dialogue.py\nimport re\nimport os\nimport configparser\nimport json\nimport threading\nimport time\nimport azure_module\nfrom datetime import datetime\nfrom enum import Enum\nfrom gpt_module import GPTClient\n\n\n\nclass InputMode(Enum):\n    KEYBOARD = 0\n    VOICE = 1\n\nclass OutputMode(Enum):\n    PRINT = 0\n    SPEAK = 1\n\nclass CheckResult(Enum):\n    BREAK = 0\n    CONTINUE = 1\n\nclass Message:\n    def __init__(self, role, content):\n        self.role = role\n        self.content = content\n\n    def to_dict(self):\n        return {\"role\": f\"{self.role}\", \"content\": self.content}\n\nclass DialogueManager:\n    def __init__(self, gpt_client, synthesizer=None, recognizer=None, parent=None):\n        '''\u5bf9\u8bdd\u7ba1\u7406\u5668\u521d\u59cb\u5316\u65b9\u6cd5\n        \n        Args:\n            gpt_client: gpt_client\u5b9e\u4f8b(GPTClient.py)\n            synthesizer: synthesizer\u5b9e\u4f8b(azure_module.py)\n            recognizer: recognizer\u5b9e\u4f8b(azure_module.py)\n            parent: gui\u4e3b\u7a97\u53e3\u5b9e\u4f8b(gui.py)\n\n        '''\n        self.gpt_client = gpt_client\n        self.synthesizer = synthesizer\n        self.recognizer = recognizer\n        self.parent = parent\n        self.set_prompt()\n        self.init_keywords()\n\n    def init_keywords(self):\n        self.InputMode = InputMode.KEYBOARD\n        self.OutputMode = OutputMode.PRINT\n\n        self.set_prompt_words = [\"\u8bbe\u7f6e\", \"set\"]\n        self.set_prompt_pattern = self.build_pattern(self.set_prompt_words)\n\n        self.save_dialogue_words = [\"\u4fdd\u5b58\", \"save\"]\n        self.save_dialogue_pattern = self.build_pattern(self.save_dialogue_words)\n\n        self.switch_OutputMode_words = [\"\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\", \"\u8bed\u97f3\"]\n        self.switch_OutputMode_pattern = self.build_pattern(self.switch_OutputMode_words)\n\n        self.switch_InputMode_words = [\"\u5207\u6362\u8f93\u5165\u6a21\u5f0f\", \"\u5207\u6362\", \"switch\", \"change\", \"toggle\"]\n        self.switch_InputMode_pattern = self.build_pattern(self.switch_InputMode_words)\n\n        self.multiline_words = [\"\u591a\u884c\", \"multiline\"]\n        self.multiline_pattern = self.build_pattern(self.multiline_words)\n\n        self.exit_words = [\"\u9000\u51fa\", \"\u7ed3\u675f\", \"\u505c\u6b62\", \"exit\", \"end\", \"quit\"]\n        self.exit_pattern = self.build_pattern(self.exit_words)\n\n    def build_pattern(self, words):\n        return \"|\".join([f\"^({word})[\u3002.]?\\s*$\" for word in words])\n\n    def check_key_words(self):\n        self.CheckResult = None\n\n        if re.match(self.set_prompt_pattern, self.user_input):\n            prompt_text = input(\"\u8bf7\u8f93\u5165prompt(system's content)\uff08\u4e0d\u9700\u8981\u5c31Enter\uff09\uff1a\")\n            prompt_file = input(\"\u8bf7\u8f93\u5165\u5bf9\u8bdd\u8bb0\u5f55\u6587\u4ef6\u540d\uff08\u4e0d\u9700\u8981\u5c31Enter\uff09\uff1a\")\n            self.set_prompt(prompt_text=prompt_text, prompt_file=prompt_file)\n            self.CheckResult = CheckResult.CONTINUE\n        if re.match(self.save_dialogue_pattern, self.user_input):\n            self.save_dialogue()\n            self.CheckResult = CheckResult.CONTINUE\n        if re.match(self.switch_OutputMode_pattern, self.user_input):\n            self.switch_OutputMode()\n            self.CheckResult = CheckResult.CONTINUE\n        if re.match(self.switch_InputMode_pattern, self.user_input):\n            self.switch_InputMode()\n            self.CheckResult = CheckResult.CONTINUE\n\n\n        if re.match(self.multiline_pattern, self.user_input):\n            self.user_input = self.get_multiline_input()\n\n        if re.match(self.exit_pattern, self.user_input):\n            self.exit_flag = True\n            self.CheckResult = CheckResult.BREAK\n\n    def set_prompt(self, prompt_text=None, prompt_file=None):\n        '''\u7528\u6765\u8bbe\u7f6eprompt\u7684\u65b9\u6cd5\n\n        Args:\n            prompt_text: \u6587\u672c\u5f62\u5f0f\u7684prompt\n            prompt_file: \u6587\u4ef6\u5f62\u5f0f\u7684prompt\n\n        '''\n        if prompt_file:\n            try:\n                file_name = os.path.join('saved_dialogue_history', prompt_file + '.json')\n                if os.path.exists(file_name):\n                    # with open(file_name, 'r', encoding='utf-8') as file:\n                    with open(file_name, 'r') as file:\n                        self.dialogue_history = json.load(file)\n                    print(f\"'{file_name}'\u521d\u59cb\u5316\u6210\u529f\")\n                else:\n                    raise Exception(f'\u672a\u627e\u5230\u6587\u4ef6{file_name}')\n            except Exception as e:\n                print(e)\n        elif prompt_text:\n            self.dialogue_history = [{\"role\": \"system\", \"content\": f'{prompt_text}'}]\n            print(f\"'{prompt_text}'\u521d\u59cb\u5316\u6210\u529f\")\n        else:\n            self.dialogue_history = [{\"role\": \"system\", \"content\": ''}]\n            print(\"\u672a\u8bbe\u7f6eprompt\")\n\n    def save_dialogue(self, file_name=None):\n        if not file_name:\n            file_name = input(\"\u8bf7\u8f93\u5165\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\uff1a\")\n\n        # \u521b\u5efa'saved_dialogue_history'\u6587\u4ef6\u5939\n        if not os.path.exists('saved_dialogue_history'):\n            os.makedirs('saved_dialogue_history')\n\n        # \u5c06\u5bf9\u8bdd\u8bb0\u5f55\u4fdd\u5b58\u4e3ajson\u6587\u4ef6\n        with open(os.path.join('saved_dialogue_history', file_name + '.json'), 'w') as file:\n            json.dump(self.dialogue_history, file)\n\n        # \u5c06\u5bf9\u8bdd\u8bb0\u5f55\u4fdd\u5b58\u4e3atxt\u6587\u4ef6\n        with open(os.path.join('saved_dialogue_history', file_name + '.txt'), 'w', encoding='utf-8') as file:\n            for message in self.dialogue_history:\n                file.write(f\"{message['role']}: {message['content']}\\n\")\n\n        print(\"\u5bf9\u8bdd\u8bb0\u5f55\u5df2\u4fdd\u5b58\")\n\n    def switch_OutputMode(self):\n        if self.OutputMode == OutputMode.PRINT:\n            if self.synthesizer:\n                self.OutputMode = OutputMode.SPEAK\n                self.output(\"\u5df2\u5207\u6362\u5230\u8bed\u97f3\u8f93\u51fa\u6a21\u5f0f\")\n            else:\n                print(\"\u62b1\u6b49\uff0c\u8bed\u97f3\u8f93\u51fa\u6a21\u5f0f\u4e0d\u53ef\u7528\")\n        else:\n            self.OutputMode = OutputMode.PRINT\n            print(\"\u5df2\u5207\u6362\u5230\u6587\u672c\u8f93\u51fa\u6a21\u5f0f\uff0c\u8bf7\u8f93\u5165\")\n\n    def switch_InputMode(self):\n        if self.InputMode == InputMode.KEYBOARD:\n            if self.recognizer:\n                self.InputMode = InputMode.VOICE\n                self.output(\"\u5df2\u5207\u6362\u5230\u8bed\u97f3\u8f93\u5165\u6a21\u5f0f\uff0c\u8bf7\u8bf4\u8bdd\")\n            else:\n                print(\"\u62b1\u6b49\uff0c\u8bed\u97f3\u8f93\u5165\u6a21\u5f0f\u4e0d\u53ef\u7528\uff0c\u8bf7\u4f7f\u7528\u952e\u76d8\u8f93\u5165\")\n        else:\n            self.InputMode = InputMode.KEYBOARD\n            print(\"\u5df2\u5207\u6362\u5230\u952e\u76d8\u8f93\u5165\u6a21\u5f0f\uff0c\u8bf7\u8f93\u5165\")\n\n    def get_multiline_input(self):\n        print(\"\u8bf7\u8f93\u5165\u591a\u884c\u5185\u5bb9\uff0c\u4ee5END\u7ed3\u675f\")\n        lines = []\n        while True:\n            line = input()\n            if line == \"END\":\n                break\n            lines.append(line)\n        return \"\\n\".join(lines)\n\n    def show_loading(self):\n        start_time = time.time()\n        while self.loading_flag:\n            print('\u52a0\u8f7d\u4e2d...', end='\\r')\n            time.sleep(2)\n            if time.time() - start_time > 60:\n                print('\u957f\u65f6\u95f4\u672a\u54cd\u5e94\uff0c\u5efa\u8bae\u7ed3\u675f\u7a0b\u5e8f')\n                break\n\n    def output(self, text):\n        if self.synthesizer and self.OutputMode == OutputMode.SPEAK:\n            self.synthesizer.text_to_speech_speaker(text)\n        print(f\"assistant: {text}\")\n        print(\"\\n----------\")\n\n    def send_and_receive(self):\n        text = self.gpt_client.send_request(self.dialogue_history)\n        self.loading_flag = False\n        self.output(text)\n        assistant_message = Message(\"assistant\", text)\n        self.dialogue_history.append(assistant_message.to_dict())\n\n    def run(self):\n        self.exit_flag = False\n        self.loading_flag = False\n        while not self.exit_flag:\n            try:\n                # \u83b7\u53d6\u7528\u6237\u8f93\u5165\n                if self.InputMode == InputMode.VOICE:\n                    print(\"User: \")\n                    self.user_input = self.recognizer.speech_to_text_microphone()\n                    print(self.user_input)\n                else:\n                    self.user_input = input(\"User: \")\n\n                # \u68c0\u67e5\u5173\u952e\u8bcd\n                self.check_key_words()\n                if self.CheckResult == CheckResult.BREAK:\n                    break\n                elif self.CheckResult == CheckResult.CONTINUE:\n                    continue\n\n                # \u5c06\u7528\u6237\u8f93\u5165\u52a0\u5165\u5bf9\u8bdd\u5386\u53f2\n                user_message = Message(\"user\", self.user_input)\n                self.dialogue_history.append(user_message.to_dict())\n                print(\"\\n----------\")\n                \n                # \u542f\u52a8\u5e76\u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\n                self.loading_flag = True\n                t1 = threading.Thread(target=self.send_and_receive)\n                t1.start()\n                t2 = threading.Thread(target=self.show_loading)\n                t2.start()\n                t1.join()\n                t2.join()\n\n            except Exception as e:\n                print(f\"Error: {e}\")\n                break\n        print('\u611f\u8c22\u60a8\u4f7f\u7528\u672c\u7a0b\u5e8f\uff0c\u518d\u89c1\uff01')\n\nif __name__ == '__main__':\n    gpt_client = GPTClient()\n\n    # # \u914d\u7f6eazure\n    # selector = azure_module.LanguageAndVoiceSelector(timeout=3)\n    # language, voice = selector.choose_language_and_voice()\n    # speech_synthesizer = azure_module.SpeechSynthesizer(language, voice)\n    # speech_recognizer = azure_module.SpeechRecognizer(language)\n\n    # # \u5e26\u6709\u8bed\u97f3\u7cfb\u7edf\u7684\u5bf9\u8bdd\u52a9\u624b\n    # dialogue_manager = DialogueManager(gpt_client, speech_synthesizer, speech_recognizer)\n\n    # \u8fd0\u884c\u5bf9\u8bdd\u7cfb\u7edf\n    dialogue_manager = DialogueManager(gpt_client)\n    dialogue_manager.run()\n```"}, {"role": "assistant", "content": "\u597d\u7684\uff0c\u6211\u5df2\u7ecf\u8bb0\u4f4f\u4e86\u8fd9\u6bb5\u4ee3\u7801\u3002\u5982\u679c\u60a8\u6709\u5173\u4e8e\u8fd9\u6bb5\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u63d0\u95ee\u3002"}, {"role": "user", "content": "\u518d\u8bb0\u4f4f\u4e0b\u9762\u7684\u4ee3\u7801\n```gui.py\nfrom gpt_module import GPTClient\nfrom dialogue_module import Message\nfrom dialogue_module import DialogueManager\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QPushButton, QVBoxLayout, QWidget, QFileDialog, QHBoxLayout, QInputDialog, QPlainTextEdit, QSplitter, QDialog, QLabel, QLineEdit, QComboBox\nfrom PyQt5.QtCore import Qt, QThreadPool, QRunnable, pyqtSlot\nimport traceback\nimport sys\nimport os\n\nclass GPTWorker(QRunnable):\n    def __init__(self, dialogue_manager, user_message):\n        super(GPTWorker, self).__init__()\n        self.dialogue_manager = dialogue_manager\n        self.user_message = user_message\n\n    @pyqtSlot()\n    def run(self):\n        try:\n            # \u5c06\u7528\u6237\u8f93\u5165\u52a0\u5165\u5bf9\u8bdd\u5386\u53f2\n            user_message_obj = Message(\"user\", self.user_message)\n            self.dialogue_manager.dialogue_history.append(user_message_obj.to_dict())\n\n            # \u83b7\u53d6AI\u52a9\u624b\u7684\u56de\u590d\n            assistant_message = self.dialogue_manager.gpt_client.send_request(self.dialogue_manager.dialogue_history)\n            assistant_message_obj = Message(\"assistant\", assistant_message)\n            self.dialogue_manager.dialogue_history.append(assistant_message_obj.to_dict())\n\n            self.dialogue_manager.parent.receive_message(assistant_message)\n\n        except Exception as e:\n            print(\"Error in GPTWorker:\", e)\n            traceback.print_exc()\n\nclass App(QMainWindow):\n    def __init__(self, dialogue_manager):\n        # QMetaType.registerMetaType(QTextCursor, \"QTextCursor\")\n\n        super().__init__()\n        self.dialogue_manager = dialogue_manager\n        self.dialogue_manager.parent = self\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle(\"GUI\")\n\n        # \u521b\u5efa\u4e00\u4e2a\u5782\u76f4\u5e03\u5c40\n        layout = QVBoxLayout()\n\n        # \u521b\u5efa\u4e00\u4e2a\u5206\u9694\u6761\n        splitter = QSplitter(Qt.Vertical)\n        \n\n        # \u521b\u5efa\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\u6765\u663e\u793a\u5bf9\u8bdd\u5386\u53f2\n        self.conversation_history = QTextEdit()\n        self.conversation_history.setReadOnly(True)\n        splitter.addWidget(self.conversation_history)\n\n        # \u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u6846\u4f9b\u7528\u6237\u8f93\u5165\u6587\u672c\n        self.user_input = QPlainTextEdit()\n        splitter.addWidget(self.user_input)\n\n        layout.addWidget(splitter)\n\n        # \u521b\u5efa\u4e00\u4e2a\u53d1\u9001\u6309\u94ae\u6765\u89e6\u53d1\u6d88\u606f\u53d1\u9001\n        self.send_button = QPushButton(\"\u53d1\u9001\")\n        self.send_button.clicked.connect(self.send_message)\n        layout.addWidget(self.send_button)\n\n        # \u521b\u5efa\u529f\u80fd\u6309\u94ae\n        self.init_feature_buttons(layout)\n\n        # \u8bbe\u7f6e\u7a97\u53e3\u7684\u5e03\u5c40\n        container = QWidget()\n        container.setLayout(layout)\n        self.setCentralWidget(container)\n\n    def init_feature_buttons(self, layout):\n        # \u521b\u5efa\u4e00\u4e2a\u6c34\u5e73\u5e03\u5c40\n        hbox = QHBoxLayout()\n\n        # \u521b\u5efa\u8bbe\u7f6ePrompt\u6309\u94ae\n        self.set_prompt_button = QPushButton(\"\u8bbe\u7f6ePrompt\")\n        self.set_prompt_button.clicked.connect(self.set_prompt)\n        hbox.addWidget(self.set_prompt_button)\n\n        # \u521b\u5efa\u4fdd\u5b58\u5bf9\u8bdd\u6309\u94ae\n        self.save_dialogue_button = QPushButton(\"\u4fdd\u5b58\u5bf9\u8bdd\")\n        self.save_dialogue_button.clicked.connect(self.save_dialogue)\n        hbox.addWidget(self.save_dialogue_button)\n\n        # # \u521b\u5efa\u5207\u6362\u8f93\u5165\u6a21\u5f0f\u6309\u94ae\n        # switch_input_mode_button = QPushButton(\"\u5207\u6362\u8f93\u5165\u6a21\u5f0f\")\n        # switch_input_mode_button.clicked.connect(self.switch_input_mode)\n        # hbox.addWidget(switch_input_mode_button)\n\n        # # \u521b\u5efa\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\u6309\u94ae\n        # switch_output_mode_button = QPushButton(\"\u5207\u6362\u8f93\u51fa\u6a21\u5f0f\")\n        # switch_output_mode_button.clicked.connect(self.switch_output_mode)\n        # hbox.addWidget(switch_output_mode_button)\n\n        layout.addLayout(hbox)\n\n    def send_message(self):\n        user_message = self.user_input.toPlainText()\n        if not user_message:\n            return\n\n        self.conversation_history.append(f\"User: {user_message}\\n\")\n        self.user_input.clear()\n\n        # \u7981\u7528\u53d1\u9001\u548c\u8bbe\u7f6ePrompt\u6309\u94ae\n        self.send_button.setEnabled(False)\n        self.set_prompt_button.setEnabled(False)\n\n        # \u521b\u5efaGPTWorker\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ebf\u7a0b\u6c60\n        gpt_worker = GPTWorker(self.dialogue_manager, user_message)\n        QThreadPool.globalInstance().start(gpt_worker)\n\n    @pyqtSlot(str)\n    def receive_message(self, assistant_message):\n        # GPT\u8bf7\u6c42\u5b8c\u6210\u540e\u66f4\u65b0UI\n        self.conversation_history.append(f\"Assistant: {assistant_message}\\n\")\n        self.send_button.setEnabled(True)\n        self.set_prompt_button.setEnabled(True)\n\n    def set_prompt(self):\n        # \u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\n        dialog = QDialog(self)\n        dialog.setWindowTitle(\"\u8bbe\u7f6ePrompt\")\n        dialog_layout = QVBoxLayout()\n\n        # \u4ece\u6587\u672c\u8f93\u5165\n        text_input_layout = QHBoxLayout()\n        text_input_label = QLabel(\"\u6587\u672c\uff1a\")\n        text_input_edit = QPlainTextEdit()\n        text_input_edit.setFixedHeight(50)\n        text_input_confirm_button = QPushButton(\"\u786e\u8ba4\")\n        text_input_layout.addWidget(text_input_label)\n        text_input_layout.addWidget(text_input_edit)\n        text_input_layout.addWidget(text_input_confirm_button)\n        dialog_layout.addLayout(text_input_layout)\n\n        # \u4ece\u6587\u4ef6\u52a0\u8f7d\n        file_input_layout = QHBoxLayout()\n        file_input_label = QLabel(\"\u6587\u4ef6\uff1a\")\n        file_input_combo = QComboBox()\n        saved_history_path = os.path.join(os.getcwd(), 'saved_dialogue_history')\n        prompt_files = [f[:-5] for f in os.listdir(saved_history_path) if f.endswith('.json')]\n        file_input_combo.addItems(prompt_files)\n        file_input_confirm_button = QPushButton(\"\u786e\u8ba4\")\n        file_input_layout.addWidget(file_input_label)\n        file_input_layout.addWidget(file_input_combo)\n        file_input_layout.addWidget(file_input_confirm_button)\n        dialog_layout.addLayout(file_input_layout)\n\n        # \u8bbe\u7f6e\u5bf9\u8bdd\u6846\u5e03\u5c40\n        dialog.setLayout(dialog_layout)\n\n        # \u8fde\u63a5\u4fe1\u53f7\u548c\u69fd\n        text_input_confirm_button.clicked.connect(lambda: self.dialogue_manager.set_prompt(prompt_text=text_input_edit.text()))\n        text_input_confirm_button.clicked.connect(dialog.accept)\n        file_input_confirm_button.clicked.connect(lambda: self.dialogue_manager.set_prompt(prompt_file=file_input_combo.currentText()))\n        file_input_confirm_button.clicked.connect(dialog.accept)\n\n        # \u663e\u793a\u5bf9\u8bdd\u6846\n        dialog.exec_()\n\n    def save_dialogue(self):\n        file_name, ok = QInputDialog.getText(self, \"\u4fdd\u5b58\u5bf9\u8bdd\", \"\u8bf7\u8f93\u5165\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\uff1a\")\n        if ok and file_name:\n            self.dialogue_manager.save_dialogue(file_name)\n        elif ok:\n            self.dialogue_manager.save_dialogue()\n\n    def switch_input_mode(self):\n        self.dialogue_manager.switch_InputMode()\n\n    def switch_output_mode(self):\n        self.dialogue_manager.switch_OutputMode()\n\nif __name__ == \"__main__\":\n    gpt_client = GPTClient()\n    dialogue_manager = DialogueManager(gpt_client)\n\n    app = QApplication(sys.argv)\n    main_window = App(dialogue_manager)\n    main_window.show()\n    sys.exit(app.exec_())\n```"}, {"role": "assistant", "content": "\u597d\u7684\uff0c\u6211\u5df2\u7ecf\u8bb0\u4f4f\u4e86\u8fd9\u6bb5\u4ee3\u7801\u3002\u73b0\u5728\u6211\u5df2\u7ecf\u8bb0\u4f4f\u4e86\u4e24\u6bb5\u4ee3\u7801\uff0c\u5206\u522b\u662f`dialogue.py`\u548c`gui.py`\u3002\u5982\u679c\u60a8\u6709\u5173\u4e8e\u8fd9\u4e9b\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u63d0\u95ee\u3002"}, {"role": "user", "content": "\u8bf7\u4f60\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u4e0b\u9762\u4ee3\u7801\u5b9e\u73b0\u7684\u529f\u80fd\u6dfb\u52a0\u5230gui.py\u4e2d\n```\n'''\u7528\u4e8e\u6279\u91cf\u5411gpt\u53d1\u9001\u8bf7\u6c42\u7684\u811a\u672c\n\n'''\n\nimport multiprocessing\nimport csv\nimport json\nimport os\nfrom gpt_module import GPTClient\n\n# \u5168\u5c40\u914d\u7f6e\ngpt_client = GPTClient()\nprompt_filename = \"\u5c0f\u8bf4\u5bb6\"\n\ndef process_row(row):\n    keywords = row[1]\n    file_name = os.path.join('saved_dialogue_history', prompt_filename + '.json')\n    with open(file_name, 'r') as file:\n        dialogue_history = json.load(file)\n    dialogue_history.append({\"role\": \"user\", \"content\": f'{keywords}'})\n    response = gpt_client.send_request(dialogue_history)\n    return row[0], keywords, response\n\ndef generate_in_batches(message_filename): \n    # \u8bfb\u53d6csv\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u884c\u6570\u636e\n    with open(message_filename, \"r\", encoding=\"utf-8\") as f:\n        reader = csv.reader(f)\n        rows = list(reader)\n\n    # \u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u6c60\uff0c\u6307\u5b9a\u8fdb\u7a0b\u6570\u4e3a4\uff08\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8c03\u6574\uff09\n    pool = multiprocessing.Pool(4)\n\n    # \u4f7f\u7528map\u65b9\u6cd5\u5c06process_row\u51fd\u6570\u548crows\u5217\u8868\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0c\u5e76\u6536\u96c6\u8fd4\u56de\u7ed3\u679c\n    results = pool.map(process_row, rows)\n\n    # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u91ca\u653e\u8d44\u6e90\n    pool.close()\n    pool.join()\n\n    # \u5c06\u7ed3\u679c\u5199\u5230csv\u6587\u4ef6\n    with open(message_filename, \"w\", encoding=\"utf-8\", newline='') as f:\n        writer = csv.writer(f)\n        writer.writerows(results)\n\nif __name__ == '__main__':\n    message_filename = \"./batches/batches.csv\"\n    generate_in_batches(message_filename)\n```"}, {"role": "assistant", "content": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06`generate_in_batches`\u51fd\u6570\u4fee\u6539\u4e3a\u63a5\u53d7\u4e00\u4e2a`prompt_filename`\u53c2\u6570\uff0c\u4ee5\u4fbf\u5728\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u63d0\u793a\u6587\u4ef6\u540d\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728`gui.py`\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6309\u94ae\u6765\u89e6\u53d1\u6279\u91cf\u751f\u6210\u529f\u80fd\uff0c\u5e76\u5c06\u8be5\u529f\u80fd\u6dfb\u52a0\u5230`App`\u7c7b\u3002\u4ee5\u4e0b\u662f\u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a\n\n\u5728`dialogue.py`\u4e2d\uff0c\u66f4\u65b0`generate_in_batches`\u51fd\u6570\uff1a\n\n```python\ndef generate_in_batches(message_filename, prompt_filename):\n    # \u5176\u4ed6\u4ee3\u7801\u4fdd\u6301\u4e0d\u53d8\n```\n\n\u5728`gui.py`\u4e2d\uff0c\u6dfb\u52a0\u6279\u91cf\u751f\u6210\u6309\u94ae\u548c\u5bf9\u5e94\u7684\u69fd\u51fd\u6570\uff1a\n\n```python\nclass App(QMainWindow):\n    # ...\n\n    def init_feature_buttons(self, layout):\n        # ...\n        \n        # \u521b\u5efa\u6279\u91cf\u751f\u6210\u6309\u94ae\n        self.generate_in_batches_button = QPushButton(\"\u6279\u91cf\u751f\u6210\")\n        self.generate_in_batches_button.clicked.connect(self.generate_in_batches)\n        hbox.addWidget(self.generate_in_batches_button)\n\n        # ...\n\n    # ...\n\n    def generate_in_batches(self):\n        # \u83b7\u53d6\u8981\u8bfb\u53d6\u7684CSV\u6587\u4ef6\u540d\n        message_filename, _ = QFileDialog.getOpenFileName(self, \"\u6253\u5f00CSV\u6587\u4ef6\", \"\", \"CSV Files (*.csv)\")\n\n        # \u83b7\u53d6\u8981\u4f7f\u7528\u7684\u63d0\u793a\u6587\u4ef6\u540d\n        prompt_filename, ok = QInputDialog.getText(self, \"\u8bbe\u7f6ePrompt\u6587\u4ef6\", \"\u8bf7\u8f93\u5165\u8981\u4f7f\u7528\u7684Prompt\u6587\u4ef6\u540d\uff1a\")\n        if ok and prompt_filename:\n            # \u8c03\u7528generate_in_batches\u51fd\u6570\n            generate_in_batches(message_filename, prompt_filename)\n        elif ok:\n            self.generate_in_batches()\n```\n\n\u8fd9\u6837\uff0c\u60a8\u53ef\u4ee5\u5728`gui.py`\u7684\u754c\u9762\u4e2d\u627e\u5230\u4e00\u4e2a\u540d\u4e3a\u201c\u6279\u91cf\u751f\u6210\u201d\u7684\u6309\u94ae\uff0c\u70b9\u51fb\u8be5\u6309\u94ae\u540e\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2aCSV\u6587\u4ef6\uff0c\u7136\u540e\u8f93\u5165\u8981\u4f7f\u7528\u7684\u63d0\u793a\u6587\u4ef6\u540d\u3002\u5f53\u8fd9\u4e9b\u4fe1\u606f\u63d0\u4f9b\u5b8c\u6bd5\u540e\uff0c\u7a0b\u5e8f\u5c06\u5f00\u59cb\u6267\u884c\u6279\u91cf\u751f\u6210\u8fc7\u7a0b\u3002"}]