system: 你是python高手
user: 你好
assistant: 你好！有什么Python问题我可以帮您解答吗？
user: 你会C#语言吗
assistant: 作为一个AI助手，我对C#语言也有一定了解。请问您有什么关于C#的问题，我可以尽量帮您解答。
user: 请你记住以下的代码，稍后会用到
```dialogue.py
import re
import os
import configparser
import json
import threading
import time
import azure_module
from datetime import datetime
from enum import Enum
from gpt_module import GPTClient



class InputMode(Enum):
    KEYBOARD = 0
    VOICE = 1

class OutputMode(Enum):
    PRINT = 0
    SPEAK = 1

class CheckResult(Enum):
    BREAK = 0
    CONTINUE = 1

class Message:
    def __init__(self, role, content):
        self.role = role
        self.content = content

    def to_dict(self):
        return {"role": f"{self.role}", "content": self.content}

class DialogueManager:
    def __init__(self, gpt_client, synthesizer=None, recognizer=None, parent=None):
        '''对话管理器初始化方法
        
        Args:
            gpt_client: gpt_client实例(GPTClient.py)
            synthesizer: synthesizer实例(azure_module.py)
            recognizer: recognizer实例(azure_module.py)
            parent: gui主窗口实例(gui.py)

        '''
        self.gpt_client = gpt_client
        self.synthesizer = synthesizer
        self.recognizer = recognizer
        self.parent = parent
        self.set_prompt()
        self.init_keywords()

    def init_keywords(self):
        self.InputMode = InputMode.KEYBOARD
        self.OutputMode = OutputMode.PRINT

        self.set_prompt_words = ["设置", "set"]
        self.set_prompt_pattern = self.build_pattern(self.set_prompt_words)

        self.save_dialogue_words = ["保存", "save"]
        self.save_dialogue_pattern = self.build_pattern(self.save_dialogue_words)

        self.switch_OutputMode_words = ["切换输出模式", "语音"]
        self.switch_OutputMode_pattern = self.build_pattern(self.switch_OutputMode_words)

        self.switch_InputMode_words = ["切换输入模式", "切换", "switch", "change", "toggle"]
        self.switch_InputMode_pattern = self.build_pattern(self.switch_InputMode_words)

        self.multiline_words = ["多行", "multiline"]
        self.multiline_pattern = self.build_pattern(self.multiline_words)

        self.exit_words = ["退出", "结束", "停止", "exit", "end", "quit"]
        self.exit_pattern = self.build_pattern(self.exit_words)

    def build_pattern(self, words):
        return "|".join([f"^({word})[。.]?\s*$" for word in words])

    def check_key_words(self):
        self.CheckResult = None

        if re.match(self.set_prompt_pattern, self.user_input):
            prompt_text = input("请输入prompt(system's content)（不需要就Enter）：")
            prompt_file = input("请输入对话记录文件名（不需要就Enter）：")
            self.set_prompt(prompt_text=prompt_text, prompt_file=prompt_file)
            self.CheckResult = CheckResult.CONTINUE
        if re.match(self.save_dialogue_pattern, self.user_input):
            self.save_dialogue()
            self.CheckResult = CheckResult.CONTINUE
        if re.match(self.switch_OutputMode_pattern, self.user_input):
            self.switch_OutputMode()
            self.CheckResult = CheckResult.CONTINUE
        if re.match(self.switch_InputMode_pattern, self.user_input):
            self.switch_InputMode()
            self.CheckResult = CheckResult.CONTINUE


        if re.match(self.multiline_pattern, self.user_input):
            self.user_input = self.get_multiline_input()

        if re.match(self.exit_pattern, self.user_input):
            self.exit_flag = True
            self.CheckResult = CheckResult.BREAK

    def set_prompt(self, prompt_text=None, prompt_file=None):
        '''用来设置prompt的方法

        Args:
            prompt_text: 文本形式的prompt
            prompt_file: 文件形式的prompt

        '''
        if prompt_file:
            try:
                file_name = os.path.join('saved_dialogue_history', prompt_file + '.json')
                if os.path.exists(file_name):
                    # with open(file_name, 'r', encoding='utf-8') as file:
                    with open(file_name, 'r') as file:
                        self.dialogue_history = json.load(file)
                    print(f"'{file_name}'初始化成功")
                else:
                    raise Exception(f'未找到文件{file_name}')
            except Exception as e:
                print(e)
        elif prompt_text:
            self.dialogue_history = [{"role": "system", "content": f'{prompt_text}'}]
            print(f"'{prompt_text}'初始化成功")
        else:
            self.dialogue_history = [{"role": "system", "content": ''}]
            print("未设置prompt")

    def save_dialogue(self, file_name=None):
        if not file_name:
            file_name = input("请输入要保存的文件名：")

        # 创建'saved_dialogue_history'文件夹
        if not os.path.exists('saved_dialogue_history'):
            os.makedirs('saved_dialogue_history')

        # 将对话记录保存为json文件
        with open(os.path.join('saved_dialogue_history', file_name + '.json'), 'w') as file:
            json.dump(self.dialogue_history, file)

        # 将对话记录保存为txt文件
        with open(os.path.join('saved_dialogue_history', file_name + '.txt'), 'w', encoding='utf-8') as file:
            for message in self.dialogue_history:
                file.write(f"{message['role']}: {message['content']}\n")

        print("对话记录已保存")

    def switch_OutputMode(self):
        if self.OutputMode == OutputMode.PRINT:
            if self.synthesizer:
                self.OutputMode = OutputMode.SPEAK
                self.output("已切换到语音输出模式")
            else:
                print("抱歉，语音输出模式不可用")
        else:
            self.OutputMode = OutputMode.PRINT
            print("已切换到文本输出模式，请输入")

    def switch_InputMode(self):
        if self.InputMode == InputMode.KEYBOARD:
            if self.recognizer:
                self.InputMode = InputMode.VOICE
                self.output("已切换到语音输入模式，请说话")
            else:
                print("抱歉，语音输入模式不可用，请使用键盘输入")
        else:
            self.InputMode = InputMode.KEYBOARD
            print("已切换到键盘输入模式，请输入")

    def get_multiline_input(self):
        print("请输入多行内容，以END结束")
        lines = []
        while True:
            line = input()
            if line == "END":
                break
            lines.append(line)
        return "\n".join(lines)

    def show_loading(self):
        start_time = time.time()
        while self.loading_flag:
            print('加载中...', end='\r')
            time.sleep(2)
            if time.time() - start_time > 60:
                print('长时间未响应，建议结束程序')
                break

    def output(self, text):
        if self.synthesizer and self.OutputMode == OutputMode.SPEAK:
            self.synthesizer.text_to_speech_speaker(text)
        print(f"assistant: {text}")
        print("\n----------")

    def send_and_receive(self):
        text = self.gpt_client.send_request(self.dialogue_history)
        self.loading_flag = False
        self.output(text)
        assistant_message = Message("assistant", text)
        self.dialogue_history.append(assistant_message.to_dict())

    def run(self):
        self.exit_flag = False
        self.loading_flag = False
        while not self.exit_flag:
            try:
                # 获取用户输入
                if self.InputMode == InputMode.VOICE:
                    print("User: ")
                    self.user_input = self.recognizer.speech_to_text_microphone()
                    print(self.user_input)
                else:
                    self.user_input = input("User: ")

                # 检查关键词
                self.check_key_words()
                if self.CheckResult == CheckResult.BREAK:
                    break
                elif self.CheckResult == CheckResult.CONTINUE:
                    continue

                # 将用户输入加入对话历史
                user_message = Message("user", self.user_input)
                self.dialogue_history.append(user_message.to_dict())
                print("\n----------")
                
                # 启动并等待线程结束
                self.loading_flag = True
                t1 = threading.Thread(target=self.send_and_receive)
                t1.start()
                t2 = threading.Thread(target=self.show_loading)
                t2.start()
                t1.join()
                t2.join()

            except Exception as e:
                print(f"Error: {e}")
                break
        print('感谢您使用本程序，再见！')

if __name__ == '__main__':
    gpt_client = GPTClient()

    # # 配置azure
    # selector = azure_module.LanguageAndVoiceSelector(timeout=3)
    # language, voice = selector.choose_language_and_voice()
    # speech_synthesizer = azure_module.SpeechSynthesizer(language, voice)
    # speech_recognizer = azure_module.SpeechRecognizer(language)

    # # 带有语音系统的对话助手
    # dialogue_manager = DialogueManager(gpt_client, speech_synthesizer, speech_recognizer)

    # 运行对话系统
    dialogue_manager = DialogueManager(gpt_client)
    dialogue_manager.run()
```
assistant: 好的，我已经记住了这段代码。如果您有关于这段代码的问题，请随时提问。
user: 再记住下面的代码
```gui.py
from gpt_module import GPTClient
from dialogue_module import Message
from dialogue_module import DialogueManager
from PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QPushButton, QVBoxLayout, QWidget, QFileDialog, QHBoxLayout, QInputDialog, QPlainTextEdit, QSplitter, QDialog, QLabel, QLineEdit, QComboBox
from PyQt5.QtCore import Qt, QThreadPool, QRunnable, pyqtSlot
import traceback
import sys
import os

class GPTWorker(QRunnable):
    def __init__(self, dialogue_manager, user_message):
        super(GPTWorker, self).__init__()
        self.dialogue_manager = dialogue_manager
        self.user_message = user_message

    @pyqtSlot()
    def run(self):
        try:
            # 将用户输入加入对话历史
            user_message_obj = Message("user", self.user_message)
            self.dialogue_manager.dialogue_history.append(user_message_obj.to_dict())

            # 获取AI助手的回复
            assistant_message = self.dialogue_manager.gpt_client.send_request(self.dialogue_manager.dialogue_history)
            assistant_message_obj = Message("assistant", assistant_message)
            self.dialogue_manager.dialogue_history.append(assistant_message_obj.to_dict())

            self.dialogue_manager.parent.receive_message(assistant_message)

        except Exception as e:
            print("Error in GPTWorker:", e)
            traceback.print_exc()

class App(QMainWindow):
    def __init__(self, dialogue_manager):
        # QMetaType.registerMetaType(QTextCursor, "QTextCursor")

        super().__init__()
        self.dialogue_manager = dialogue_manager
        self.dialogue_manager.parent = self
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("GUI")

        # 创建一个垂直布局
        layout = QVBoxLayout()

        # 创建一个分隔条
        splitter = QSplitter(Qt.Vertical)
        

        # 创建一个文本编辑器来显示对话历史
        self.conversation_history = QTextEdit()
        self.conversation_history.setReadOnly(True)
        splitter.addWidget(self.conversation_history)

        # 创建一个输入框供用户输入文本
        self.user_input = QPlainTextEdit()
        splitter.addWidget(self.user_input)

        layout.addWidget(splitter)

        # 创建一个发送按钮来触发消息发送
        self.send_button = QPushButton("发送")
        self.send_button.clicked.connect(self.send_message)
        layout.addWidget(self.send_button)

        # 创建功能按钮
        self.init_feature_buttons(layout)

        # 设置窗口的布局
        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

    def init_feature_buttons(self, layout):
        # 创建一个水平布局
        hbox = QHBoxLayout()

        # 创建设置Prompt按钮
        self.set_prompt_button = QPushButton("设置Prompt")
        self.set_prompt_button.clicked.connect(self.set_prompt)
        hbox.addWidget(self.set_prompt_button)

        # 创建保存对话按钮
        self.save_dialogue_button = QPushButton("保存对话")
        self.save_dialogue_button.clicked.connect(self.save_dialogue)
        hbox.addWidget(self.save_dialogue_button)

        # # 创建切换输入模式按钮
        # switch_input_mode_button = QPushButton("切换输入模式")
        # switch_input_mode_button.clicked.connect(self.switch_input_mode)
        # hbox.addWidget(switch_input_mode_button)

        # # 创建切换输出模式按钮
        # switch_output_mode_button = QPushButton("切换输出模式")
        # switch_output_mode_button.clicked.connect(self.switch_output_mode)
        # hbox.addWidget(switch_output_mode_button)

        layout.addLayout(hbox)

    def send_message(self):
        user_message = self.user_input.toPlainText()
        if not user_message:
            return

        self.conversation_history.append(f"User: {user_message}\n")
        self.user_input.clear()

        # 禁用发送和设置Prompt按钮
        self.send_button.setEnabled(False)
        self.set_prompt_button.setEnabled(False)

        # 创建GPTWorker并将其添加到线程池
        gpt_worker = GPTWorker(self.dialogue_manager, user_message)
        QThreadPool.globalInstance().start(gpt_worker)

    @pyqtSlot(str)
    def receive_message(self, assistant_message):
        # GPT请求完成后更新UI
        self.conversation_history.append(f"Assistant: {assistant_message}\n")
        self.send_button.setEnabled(True)
        self.set_prompt_button.setEnabled(True)

    def set_prompt(self):
        # 创建一个自定义对话框
        dialog = QDialog(self)
        dialog.setWindowTitle("设置Prompt")
        dialog_layout = QVBoxLayout()

        # 从文本输入
        text_input_layout = QHBoxLayout()
        text_input_label = QLabel("文本：")
        text_input_edit = QPlainTextEdit()
        text_input_edit.setFixedHeight(50)
        text_input_confirm_button = QPushButton("确认")
        text_input_layout.addWidget(text_input_label)
        text_input_layout.addWidget(text_input_edit)
        text_input_layout.addWidget(text_input_confirm_button)
        dialog_layout.addLayout(text_input_layout)

        # 从文件加载
        file_input_layout = QHBoxLayout()
        file_input_label = QLabel("文件：")
        file_input_combo = QComboBox()
        saved_history_path = os.path.join(os.getcwd(), 'saved_dialogue_history')
        prompt_files = [f[:-5] for f in os.listdir(saved_history_path) if f.endswith('.json')]
        file_input_combo.addItems(prompt_files)
        file_input_confirm_button = QPushButton("确认")
        file_input_layout.addWidget(file_input_label)
        file_input_layout.addWidget(file_input_combo)
        file_input_layout.addWidget(file_input_confirm_button)
        dialog_layout.addLayout(file_input_layout)

        # 设置对话框布局
        dialog.setLayout(dialog_layout)

        # 连接信号和槽
        text_input_confirm_button.clicked.connect(lambda: self.dialogue_manager.set_prompt(prompt_text=text_input_edit.text()))
        text_input_confirm_button.clicked.connect(dialog.accept)
        file_input_confirm_button.clicked.connect(lambda: self.dialogue_manager.set_prompt(prompt_file=file_input_combo.currentText()))
        file_input_confirm_button.clicked.connect(dialog.accept)

        # 显示对话框
        dialog.exec_()

    def save_dialogue(self):
        file_name, ok = QInputDialog.getText(self, "保存对话", "请输入要保存的文件名：")
        if ok and file_name:
            self.dialogue_manager.save_dialogue(file_name)
        elif ok:
            self.dialogue_manager.save_dialogue()

    def switch_input_mode(self):
        self.dialogue_manager.switch_InputMode()

    def switch_output_mode(self):
        self.dialogue_manager.switch_OutputMode()

if __name__ == "__main__":
    gpt_client = GPTClient()
    dialogue_manager = DialogueManager(gpt_client)

    app = QApplication(sys.argv)
    main_window = App(dialogue_manager)
    main_window.show()
    sys.exit(app.exec_())
```
assistant: 好的，我已经记住了这段代码。现在我已经记住了两段代码，分别是`dialogue.py`和`gui.py`。如果您有关于这些代码的问题，请随时提问。
user: 请你帮我优化下面的代码，并将下面代码实现的功能添加到gui.py中
```
'''用于批量向gpt发送请求的脚本

'''

import multiprocessing
import csv
import json
import os
from gpt_module import GPTClient

# 全局配置
gpt_client = GPTClient()
prompt_filename = "小说家"

def process_row(row):
    keywords = row[1]
    file_name = os.path.join('saved_dialogue_history', prompt_filename + '.json')
    with open(file_name, 'r') as file:
        dialogue_history = json.load(file)
    dialogue_history.append({"role": "user", "content": f'{keywords}'})
    response = gpt_client.send_request(dialogue_history)
    return row[0], keywords, response

def generate_in_batches(message_filename): 
    # 读取csv文件中的所有行数据
    with open(message_filename, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        rows = list(reader)

    # 创建一个进程池，指定进程数为4（可以根据实际情况调整）
    pool = multiprocessing.Pool(4)

    # 使用map方法将process_row函数和rows列表分配给不同的进程，并收集返回结果
    results = pool.map(process_row, rows)

    # 关闭进程池，释放资源
    pool.close()
    pool.join()

    # 将结果写到csv文件
    with open(message_filename, "w", encoding="utf-8", newline='') as f:
        writer = csv.writer(f)
        writer.writerows(results)

if __name__ == '__main__':
    message_filename = "./batches/batches.csv"
    generate_in_batches(message_filename)
```
assistant: 首先，我们可以将`generate_in_batches`函数修改为接受一个`prompt_filename`参数，以便在调用该函数时可以自定义提示文件名。然后，我们可以在`gui.py`中添加一个按钮来触发批量生成功能，并将该功能添加到`App`类。以下是修改后的代码：

在`dialogue.py`中，更新`generate_in_batches`函数：

```python
def generate_in_batches(message_filename, prompt_filename):
    # 其他代码保持不变
```

在`gui.py`中，添加批量生成按钮和对应的槽函数：

```python
class App(QMainWindow):
    # ...

    def init_feature_buttons(self, layout):
        # ...
        
        # 创建批量生成按钮
        self.generate_in_batches_button = QPushButton("批量生成")
        self.generate_in_batches_button.clicked.connect(self.generate_in_batches)
        hbox.addWidget(self.generate_in_batches_button)

        # ...

    # ...

    def generate_in_batches(self):
        # 获取要读取的CSV文件名
        message_filename, _ = QFileDialog.getOpenFileName(self, "打开CSV文件", "", "CSV Files (*.csv)")

        # 获取要使用的提示文件名
        prompt_filename, ok = QInputDialog.getText(self, "设置Prompt文件", "请输入要使用的Prompt文件名：")
        if ok and prompt_filename:
            # 调用generate_in_batches函数
            generate_in_batches(message_filename, prompt_filename)
        elif ok:
            self.generate_in_batches()
```

这样，您可以在`gui.py`的界面中找到一个名为“批量生成”的按钮，点击该按钮后，您可以选择一个CSV文件，然后输入要使用的提示文件名。当这些信息提供完毕后，程序将开始执行批量生成过程。
